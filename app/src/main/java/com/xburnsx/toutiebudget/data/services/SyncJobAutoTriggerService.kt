package com.xburnsx.toutiebudget.data.services

import android.content.Context
import android.util.Log
import com.xburnsx.toutiebudget.workers.SyncWorkManager
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

/**
 * Service qui d√©clenche AUTOMATIQUEMENT la synchronisation d√®s qu'un SyncJob est cr√©√©
 * üöÄ SYNCJOBS EN TEMPS R√âEL - Plus d'attente !
 * 
 * UTILISATION : Appeler declencherSynchronisationArrierePlan() APR√àS chaque insertSyncJob()
 */
object SyncJobAutoTriggerService {
    
    private const val TAG = "SyncJobAutoTrigger"
    
    /**
     * D√©clenche IMM√âDIATEMENT la synchronisation apr√®s cr√©ation d'un SyncJob
     * Cette fonction doit √™tre appel√©e APR√àS chaque insertSyncJob() dans TOUS les repositories
     */
    fun declencherSynchronisationImmediate(context: Context) {
        Log.d(TAG, "üöÄ D√âCLENCHEMENT IMM√âDIAT de la synchronisation")
        
        // D√©marrer la synchronisation IMM√âDIATEMENT (avec contraintes r√©seau)
        SyncWorkManager.demarrerSynchronisation(context)
        
        // Planifier aussi la synchronisation automatique pour les futurs changements r√©seau
        SyncWorkManager.planifierSynchronisationAutomatique(context)
    }
    
    /**
     * D√©clenche la synchronisation en arri√®re-plan (pour les cas o√π on n'a pas de Context)
     * Utilise le Context de l'application - FONCTION GLOBALE pour tous les repositories
     */
    fun declencherSynchronisationArrierePlan() {
        val context = getApplicationContext()
        if (context != null) {
            declencherSynchronisationImmediate(context)
        } else {
            Log.w(TAG, "‚ö†Ô∏è Impossible de d√©clencher la synchronisation - Context non disponible")
        }
    }
    
    /**
     * R√©cup√®re le Context de l'application
     */
    private fun getApplicationContext(): Context? {
        return try {
            val applicationClass = Class.forName("com.xburnsx.toutiebudget.ToutieBudgetApplication")
            val getInstanceMethod = applicationClass.getMethod("getInstance")
            val application = getInstanceMethod.invoke(null) as? com.xburnsx.toutiebudget.ToutieBudgetApplication
            application
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de la r√©cup√©ration du Context", e)
            null
        }
    }
}
