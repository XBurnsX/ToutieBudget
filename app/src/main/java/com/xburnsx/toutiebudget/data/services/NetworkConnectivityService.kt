package com.xburnsx.toutiebudget.data.services

import android.content.Context
import android.net.ConnectivityManager
import android.net.Network
import android.net.NetworkCapabilities
import android.net.NetworkRequest
// import android.util.Log
import com.xburnsx.toutiebudget.workers.SyncWorkManager
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

/**
 * Service de gestion de la connectivit√© r√©seau
 * D√©tecte automatiquement quand internet revient et d√©clenche la synchronisation
 * üÜï MODE HORS LIGNE : Synchronisation automatique d√®s que la connectivit√© est r√©tablie
 */
class NetworkConnectivityService(private val context: Context) {
    
    private val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
    private val scope = CoroutineScope(Dispatchers.IO)
    
    private var isNetworkCallbackRegistered = false
    private var wasOffline = false
    
    companion object {
        private const val TAG = "NetworkConnectivity"
    }
    
    /**
     * D√©marre la surveillance de la connectivit√© r√©seau
     */
    fun startNetworkMonitoring() {
        if (isNetworkCallbackRegistered) {
            // ‚ö†Ô∏è Surveillance r√©seau d√©j√† active
            return
        }
        
        try {
            val networkRequest = NetworkRequest.Builder()
                .addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)
                .addTransportType(NetworkCapabilities.TRANSPORT_WIFI)
                .addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR)
                .build()
            
            connectivityManager.registerNetworkCallback(networkRequest, networkCallback)
            isNetworkCallbackRegistered = true
            
            // V√©rifier l'√©tat initial
            val isCurrentlyOnline = isNetworkAvailable()
            wasOffline = !isCurrentlyOnline
            
            // ‚úÖ Surveillance r√©seau d√©marr√©e - √âtat actuel: ${if (isCurrentlyOnline) "En ligne" else "Hors ligne"}
            
        } catch (e: Exception) {
            // ‚ùå Erreur lors du d√©marrage de la surveillance r√©seau
        }
    }
    
    /**
     * Arr√™te la surveillance de la connectivit√© r√©seau
     */
    fun stopNetworkMonitoring() {
        if (isNetworkCallbackRegistered) {
            try {
                connectivityManager.unregisterNetworkCallback(networkCallback)
                isNetworkCallbackRegistered = false
                // ‚úÖ Surveillance r√©seau arr√™t√©e
            } catch (e: Exception) {
                // ‚ùå Erreur lors de l'arr√™t de la surveillance r√©seau
            }
        }
    }
    
    /**
     * Callback de changement de connectivit√© r√©seau
     */
    private val networkCallback = object : ConnectivityManager.NetworkCallback() {
        
        override fun onAvailable(network: Network) {
            // üåê R√©seau disponible: $network
            
            if (wasOffline) {
                // üöÄ INTERNET REVIENT - D√©clenchement de la synchronisation automatique
                wasOffline = false
                
                // D√©clencher la synchronisation en arri√®re-plan
                scope.launch {
                    try {
                        // D√©lai pour s'assurer que la connexion est stable
                        kotlinx.coroutines.delay(2000)
                        
                        // V√©rifier que la connexion est toujours active
                        if (isNetworkAvailable()) {
                            // ‚úÖ Connexion stable confirm√©e - Lancement de la synchronisation
                            
                            // D√©marrer la synchronisation imm√©diatement
                            SyncWorkManager.demarrerSynchronisation(context)
                            
                            // Planifier aussi la synchronisation automatique pour les futurs changements
                            SyncWorkManager.planifierSynchronisationAutomatique(context)
                            
                        } else {
                            // ‚ö†Ô∏è Connexion instable - Synchronisation report√©e
                        }
                    } catch (e: Exception) {
                        // ‚ùå Erreur lors du d√©clenchement de la synchronisation
                    }
                }
            }
        }
        
        override fun onLost(network: Network) {
            // ‚ùå R√©seau perdu: $network
            wasOffline = true
        }
        
        override fun onCapabilitiesChanged(network: Network, networkCapabilities: NetworkCapabilities) {
            val hasInternet = networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)
            val hasValidated = networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED)
            
            // üîÑ Capacit√©s r√©seau chang√©es - Internet: $hasInternet, Valid√©: $hasValidated
        }
    }
    
    /**
     * V√©rifie si le r√©seau est actuellement disponible
     */
    fun isNetworkAvailable(): Boolean {
        return try {
            val activeNetwork = connectivityManager.activeNetwork
            if (activeNetwork != null) {
                val networkCapabilities = connectivityManager.getNetworkCapabilities(activeNetwork)
                networkCapabilities?.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET) == true &&
                networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED)
            } else {
                false
            }
        } catch (e: Exception) {
            // ‚ùå Erreur lors de la v√©rification de la connectivit√©
            false
        }
    }
    
    /**
     * V√©rifie si l'application √©tait en mode hors ligne
     */
    fun wasInOfflineMode(): Boolean = wasOffline
    
    /**
     * Force la v√©rification de la connectivit√© et d√©clenche la synchronisation si n√©cessaire
     */
    fun checkConnectivityAndSync() {
        scope.launch {
            try {
                if (isNetworkAvailable() && wasOffline) {
                    // üîç V√©rification manuelle - Internet disponible, d√©clenchement de la synchronisation
                    wasOffline = false
                    
                    // D√©lai pour s'assurer que la connexion est stable
                    kotlinx.coroutines.delay(1000)
                    
                    if (isNetworkAvailable()) {
                        SyncWorkManager.demarrerSynchronisation(context)
                        SyncWorkManager.planifierSynchronisationAutomatique(context)
                    }
                }
            } catch (e: Exception) {
                // ‚ùå Erreur lors de la v√©rification manuelle
            }
        }
    }
}
