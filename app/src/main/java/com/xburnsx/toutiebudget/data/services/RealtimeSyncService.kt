package com.xburnsx.toutiebudget.data.services

import com.google.gson.Gson
import com.google.gson.JsonObject
import com.xburnsx.toutiebudget.di.PocketBaseClient
import com.xburnsx.toutiebudget.di.UrlResolver
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.flow.asSharedFlow
import kotlinx.coroutines.launch
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.WebSocket
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Service de synchronisation temps r√©el avec PocketBase.
 * √âcoute les changements via WebSocket et notifie les ViewModels.
 * INVISIBLE √† l'utilisateur - fonctionne en arri√®re-plan.
 */
@Singleton
class RealtimeSyncService @Inject constructor() {

    private val client = PocketBaseClient
    private val httpClient = OkHttpClient()
    private val gson = Gson()
    private val serviceScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)
    private var webSocket: WebSocket? = null
    private var isConnected = false

    // Events pour notifier les ViewModels
    private val _budgetUpdated = MutableSharedFlow<Unit>()
    val budgetUpdated: SharedFlow<Unit> = _budgetUpdated.asSharedFlow()

    private val _comptesUpdated = MutableSharedFlow<Unit>()
    val comptesUpdated: SharedFlow<Unit> = _comptesUpdated.asSharedFlow()

    private val _categoriesUpdated = MutableSharedFlow<Unit>()
    val categoriesUpdated: SharedFlow<Unit> = _categoriesUpdated.asSharedFlow()

    private val _transactionsUpdated = MutableSharedFlow<Unit>()
    val transactionsUpdated: SharedFlow<Unit> = _transactionsUpdated.asSharedFlow()

    /**
     * D√©marre la synchronisation temps r√©el.
     * Appel√© automatiquement au d√©marrage de l'app.
     */
    fun startRealtimeSync() {
        println("[REALTIME] üöÄ D√©marrage du service temps r√©el...")

        if (isConnected) {
            println("[REALTIME] ‚ö†Ô∏è D√©j√† connect√©, ignor√©")
            return
        }

        serviceScope.launch {
            try {
                println("[REALTIME] üîÑ Tentative de connexion WebSocket...")
                connectWebSocket()
            } catch (e: Exception) {
                println("[REALTIME] ‚ùå Erreur connexion WebSocket: ${e.message}")
                println("[REALTIME] üîÑ Retry dans 5 secondes...")
                // Retry apr√®s 5 secondes
                kotlinx.coroutines.delay(5000)
                startRealtimeSync()
            }
        }
    }

    /**
     * Arr√™te la synchronisation temps r√©el.
     */
    fun stopRealtimeSync() {
        webSocket?.close(1000, "App ferm√©e")
        webSocket = null
        isConnected = false
    }

    fun triggerBudgetUpdate() {
        serviceScope.launch {
            _budgetUpdated.emit(Unit)
        }
    }

    private suspend fun connectWebSocket() {
        println("[REALTIME] üîç V√©rification de la connexion client...")

        if (!client.estConnecte()) {
            println("[REALTIME] ‚ö†Ô∏è Client non connect√©, retry dans 3 secondes...")
            kotlinx.coroutines.delay(3000)
            startRealtimeSync() // Retry
            return
        }
        println("[REALTIME] ‚úÖ Client connect√©")

        val token = client.obtenirToken()
        if (token == null) {
            println("[REALTIME] ‚ùå Token manquant, abandon")
            return
        }
        println("[REALTIME] ‚úÖ Token r√©cup√©r√©: ${token.take(10)}...")

        // üöÄ VRAIE SOLUTION TEMPS R√âEL : Server-Sent Events (SSE)
        println("[REALTIME] üîÑ Connexion SSE temps r√©el √† PocketBase...")
        startServerSentEvents(token)
    }

    /**
     * D√©marre une connexion Server-Sent Events (SSE) pour le VRAI temps r√©el.
     * C'est l'API officielle de PocketBase pour le temps r√©el.
     */
    private suspend fun startServerSentEvents(token: String) {
        serviceScope.launch {
            try {
                val urlBase = UrlResolver.obtenirUrlActive()

                // Collections √† √©couter
                val collections = listOf(
                    "allocations_mensuelles",
                    "comptes_cheque",
                    "comptes_dette",
                    "enveloppes",
                    "categories",
                    "transactions"
                )

                // Construire l'URL SSE avec les collections en param√®tres
                val collectionsParam = collections.joinToString(",")
                val sseUrl = "$urlBase/api/realtime?subscribe=$collectionsParam"

                println("[REALTIME] üåê URL SSE: $sseUrl")

                val request = Request.Builder()
                    .url(sseUrl)
                    .addHeader("Authorization", "Bearer $token")
                    .addHeader("Accept", "text/event-stream")
                    .addHeader("Cache-Control", "no-cache")
                    .build()

                val call = httpClient.newCall(request)
                val response = call.execute()

                if (response.isSuccessful) {
                    isConnected = true
                    println("[REALTIME] ‚úÖ Connexion SSE √©tablie")
                    println("[REALTIME] ‚úÖ Abonn√© aux collections: $collectionsParam")

                    // Lire le stream en temps r√©el
                    response.body?.source()?.let { source ->
                        while (isConnected && !source.exhausted()) {
                            try {
                                val line = source.readUtf8Line()
                                if (line != null) {
                                    println("[REALTIME] üì• Ligne re√ßue: $line")
                                    if (line.startsWith("data: ")) {
                                        val data = line.substring(6) // Enlever "data: "
                                        handleRealtimeEvent(data)
                                    }
                                }
                            } catch (e: Exception) {
                                println("[REALTIME] ‚ö†Ô∏è Erreur lecture SSE: ${e.message}")
                                break
                            }
                        }
                    }
                } else {
                    println("[REALTIME] ‚ùå Erreur SSE: ${response.code} ${response.message}")
                    // Retry apr√®s 5 secondes
                    kotlinx.coroutines.delay(5000)
                    startRealtimeSync()
                }

            } catch (e: Exception) {
                println("[REALTIME] ‚ùå Erreur connexion SSE: ${e.message}")
                isConnected = false
                // Retry apr√®s 5 secondes
                kotlinx.coroutines.delay(5000)
                startRealtimeSync()
            }
        }
    }

    /**
     * Traite les √©v√©nements temps r√©el re√ßus de PocketBase.
     */
    private suspend fun handleRealtimeEvent(data: String) {
        try {
            println("[REALTIME] üì® √âv√©nement re√ßu: $data")

            val jsonEvent = gson.fromJson(data, JsonObject::class.java)
            val action = jsonEvent.get("action")?.asString
            val record = jsonEvent.get("record")?.asJsonObject
            val collection = record?.get("collectionName")?.asString

            println("[REALTIME] üîÑ Action: $action, Collection: $collection")

            // Notifier les ViewModels selon la collection modifi√©e
            when (collection) {
                "allocations_mensuelles" -> {
                    println("[REALTIME] üí∞ Mise √† jour budget (allocations)")
                    _budgetUpdated.emit(Unit)
                }
                "comptes_cheque", "comptes_dette" -> {
                    println("[REALTIME] üè¶ Mise √† jour comptes")
                    _comptesUpdated.emit(Unit)
                    _budgetUpdated.emit(Unit) // Budget d√©pend aussi des comptes
                }
                "enveloppes" -> {
                    println("[REALTIME] üìÆ Mise √† jour budget (enveloppes)")
                    _budgetUpdated.emit(Unit)
                }
                "categories" -> {
                    println("[REALTIME] üìÇ Mise √† jour cat√©gories")
                    _categoriesUpdated.emit(Unit)
                    _budgetUpdated.emit(Unit)
                }
                "transactions" -> {
                    println("[REALTIME] üí∏ Mise √† jour transactions")
                    _transactionsUpdated.emit(Unit)
                    _budgetUpdated.emit(Unit)
                    _comptesUpdated.emit(Unit)
                }
            }

        } catch (e: Exception) {
            println("[REALTIME] ‚ùå Erreur parsing √©v√©nement: ${e.message}")
        }
    }


    /**
     * Force une reconnexion (utile apr√®s login/logout).
     */
    fun reconnect() {
        println("[REALTIME] üîÑ Reconnexion forc√©e...")
        stopRealtimeSync()
        startRealtimeSync()
    }

    /**
     * D√©marre le service apr√®s que l'utilisateur soit connect√©.
     * √Ä appeler apr√®s un login r√©ussi.
     */
    fun startAfterLogin() {
        println("[REALTIME] üîë D√©marrage apr√®s login...")
        startRealtimeSync()
    }
}
