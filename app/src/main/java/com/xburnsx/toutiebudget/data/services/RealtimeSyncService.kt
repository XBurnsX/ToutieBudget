package com.xburnsx.toutiebudget.data.services

import com.google.gson.Gson
import com.google.gson.JsonObject
import com.google.gson.JsonArray
import com.google.gson.JsonElement
import com.xburnsx.toutiebudget.di.PocketBaseClient
import com.xburnsx.toutiebudget.di.UrlResolver
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.flow.asSharedFlow
import kotlinx.coroutines.launch
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.WebSocket
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Service de synchronisation temps r√©el avec PocketBase.
 * √âcoute les changements via WebSocket et notifie les ViewModels.
 * INVISIBLE √† l'utilisateur - fonctionne en arri√®re-plan.
 */
@Singleton
class RealtimeSyncService @Inject constructor() {

    private val client = PocketBaseClient
    private val httpClient = OkHttpClient()
    private val gson = Gson()
    private val serviceScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)
    private var webSocket: WebSocket? = null
    private var isConnected = false

    // Events pour notifier les ViewModels
    private val _budgetUpdated = MutableSharedFlow<Unit>()
    val budgetUpdated: SharedFlow<Unit> = _budgetUpdated.asSharedFlow()

    private val _comptesUpdated = MutableSharedFlow<Unit>()
    val comptesUpdated: SharedFlow<Unit> = _comptesUpdated.asSharedFlow()

    private val _categoriesUpdated = MutableSharedFlow<Unit>()
    val categoriesUpdated: SharedFlow<Unit> = _categoriesUpdated.asSharedFlow()

    private val _transactionsUpdated = MutableSharedFlow<Unit>()
    val transactionsUpdated: SharedFlow<Unit> = _transactionsUpdated.asSharedFlow()

    /**
     * D√©marre la synchronisation temps r√©el.
     * Appel√© automatiquement au d√©marrage de l'app.
     */
    fun startRealtimeSync() {
        if (isConnected) {
            return
        }

        serviceScope.launch {
            try {
                connectWebSocket()
            } catch (e: Exception) {
                println("[REALTIME] ‚ùå Erreur connexion: ${e.message}")
                // Retry apr√®s 5 secondes
                kotlinx.coroutines.delay(5000)
                startRealtimeSync()
            }
        }
    }

    /**
     * Arr√™te la synchronisation temps r√©el.
     */
    fun stopRealtimeSync() {
        webSocket?.close(1000, "App ferm√©e")
        webSocket = null
        isConnected = false
    }

    fun triggerBudgetUpdate() {
        serviceScope.launch {
            _budgetUpdated.emit(Unit)
        }
    }

    /**
     * D√©clenche une mise √† jour du budget (m√©thode publique).
     * Utilis√©e par les ViewModels pour notifier les changements.
     */
    fun declencherMiseAJourBudget() {
        serviceScope.launch {
            _budgetUpdated.emit(Unit)
        }
    }

    /**
     * D√©clenche une mise √† jour des comptes (m√©thode publique).
     * Utilis√©e par les repositories pour notifier les changements.
     */
    fun declencherMiseAJourComptes() {
        serviceScope.launch {
            _comptesUpdated.emit(Unit)
        }
    }

    private suspend fun connectWebSocket() {
        if (!client.estConnecte()) {
            kotlinx.coroutines.delay(3000)
            startRealtimeSync() // Retry
            return
        }

        val token = client.obtenirToken()
        if (token == null) {
            return
        }

        startServerSentEvents(token)
    }

    /**
     * D√©marre une connexion Server-Sent Events (SSE) pour le VRAI temps r√©el.
     * C'est l'API officielle de PocketBase pour le temps r√©el.
     */
    private suspend fun startServerSentEvents(token: String) {
        serviceScope.launch {
            try {
                val urlBase = UrlResolver.obtenirUrlActive()

                // Collections √† √©couter
                val collections = listOf(
                    "allocations_mensuelles",
                    "comptes_cheques",
                    "comptes_credits",
                    "comptes_dettes",
                    "comptes_investissement",
                    "enveloppes",
                    "categories",
                    "transactions"
                )

                // Construire l'URL SSE avec les collections en param√®tres
                val collectionsParam = collections.joinToString(",")
                val sseUrl = "$urlBase/api/realtime?subscribe=$collectionsParam"

                val request = Request.Builder()
                    .url(sseUrl)
                    .addHeader("Authorization", "Bearer $token")
                    .addHeader("Accept", "text/event-stream")
                    .addHeader("Cache-Control", "no-cache")
                    .build()

                val call = httpClient.newCall(request)
                val response = call.execute()

                if (response.isSuccessful) {
                    isConnected = true
                    println("[REALTIME] ‚úÖ Connexion √©tablie")

                    // Lire le stream en temps r√©el
                    response.body?.source()?.let { source ->
                        while (isConnected && !source.exhausted()) {
                            try {
                                val line = source.readUtf8Line()
                                if (line != null && line.startsWith("data: ")) {
                                    val data = line.substring(6) // Enlever "data: "
                                    if (data.isNotEmpty() && data != "{\"clientId\":") {
                                        handleRealtimeEvent(data)
                                    }
                                }
                            } catch (e: Exception) {
                                break
                            }
                        }
                    }
                } else {
                    println("[REALTIME] ‚ùå Erreur connexion: ${response.code}")
                    // Retry apr√®s 5 secondes
                    kotlinx.coroutines.delay(5000)
                    startRealtimeSync()
                }

            } catch (e: Exception) {
                isConnected = false
                // Retry apr√®s 5 secondes
                kotlinx.coroutines.delay(5000)
                startRealtimeSync()
            }
        }
    }

    /**
     * Traite les √©v√©nements temps r√©el re√ßus de PocketBase.
     */
    private suspend fun handleRealtimeEvent(data: String) {
        try {
            val jsonEvent = gson.fromJson(data, JsonObject::class.java)
            val action = jsonEvent.get("action")?.asString
            val record = jsonEvent.get("record")?.asJsonObject
            val collection = record?.get("collectionName")?.asString

            // Notifier les ViewModels selon la collection modifi√©e
            when (collection) {
                "allocations_mensuelles" -> {
                    println("[REALTIME] üí∞ Budget mis √† jour")
                    _budgetUpdated.emit(Unit)
                }
                "comptes_cheques", "comptes_credits", "comptes_dettes", "comptes_investissement" -> {
                    println("[REALTIME] üè¶ Comptes mis √† jour")
                    _comptesUpdated.emit(Unit)
                    _budgetUpdated.emit(Unit)
                }
                "enveloppes" -> {
                    println("[REALTIME] üìÆ Enveloppes mises √† jour")
                    _budgetUpdated.emit(Unit)
                }
                "categories" -> {
                    println("[REALTIME] üìÇ Cat√©gories mises √† jour")
                    _categoriesUpdated.emit(Unit)
                    _budgetUpdated.emit(Unit)
                }
                "transactions" -> {
                    println("[REALTIME] üí∏ Transactions mises √† jour")
                    _transactionsUpdated.emit(Unit)
                    _budgetUpdated.emit(Unit)
                    _comptesUpdated.emit(Unit)
                }
            }

        } catch (e: Exception) {
            // Ignorer les erreurs de parsing silencieusement
        }
    }


    /**
     * Force une reconnexion (utile apr√®s login/logout).
     */
    fun reconnect() {
        println("[REALTIME] üîÑ Reconnexion forc√©e...")
        stopRealtimeSync()
        startRealtimeSync()
    }

    /**
     * D√©marre le service apr√®s que l'utilisateur soit connect√©.
     * √Ä appeler apr√®s un login r√©ussi.
     */
    fun startAfterLogin() {
        println("[REALTIME] üîë D√©marrage apr√®s login...")
        startRealtimeSync()
    }

    /**
     * FONCTION DE DEBUG - Montre EXACTEMENT ce qui se passe
     */
    suspend fun debugSuppression(): Result<String> = runCatching {
        val userId = client.obtenirUtilisateurConnecte()?.id ?: throw Exception("Utilisateur non connect√©")
        val debugLog = StringBuilder()

        debugLog.appendLine("=== DEBUG SUPPRESSION ===")
        debugLog.appendLine("Utilisateur connect√©: $userId")
        debugLog.appendLine("Token pr√©sent: ${client.obtenirToken() != null}")
        debugLog.appendLine("")

        // Test de base - est-ce que les m√©thodes HTTP fonctionnent?
        try {
            debugLog.appendLine("TEST 1: M√©thodes HTTP de base")
            val healthResponse = client.effectuerRequeteGet("/api/health", emptyMap())
            debugLog.appendLine("‚úÖ GET /api/health fonctionne: ${healthResponse.take(100)}")
        } catch (e: Exception) {
            debugLog.appendLine("‚ùå GET /api/health √âCHOUE: ${e.message}")
            return@runCatching debugLog.toString()
        }

        debugLog.appendLine("\n=== FIN DEBUG ===")
        debugLog.toString()
    }

    /**
     * VERSION INTELLIGENTE - D√©couvre automatiquement les VRAIS noms de collections et supprime seulement tes donn√©es
     */
    suspend fun supprimerToutesLesDonnees(): Result<Unit> = runCatching {
        val userId = client.obtenirUtilisateurConnecte()?.id ?: throw Exception("Utilisateur non connect√©")

        println("[RESET INTELLIGENT] üß† D√âCOUVERTE AUTOMATIQUE DES COLLECTIONS...")
        println("[RESET INTELLIGENT] üë§ Utilisateur: $userId")
        var totalSupprime = 0

        // Liste de TOUS les noms possibles bas√©s sur l'analyse de ton projet
        val nomsCollectionsPossibles = listOf(
            // Nom confirm√© dans CategorieRepositoryImpl.kt
            "categorie",

            // Variations pour enveloppes (utilis√© avec Collections.ENVELOPPES)
            "enveloppe", "enveloppes", "Enveloppe", "Enveloppes",

            // Variations pour allocations (utilis√© avec Collections.ALLOCATIONS)
            "allocation", "allocations", "allocation_mensuelle", "allocations_mensuelles",
            "Allocation", "Allocations", "Allocation_Mensuelle", "Allocations_Mensuelles",

            // Variations pour transactions (utilis√© avec Collections.TRANSACTIONS)
            "transaction", "transactions", "Transaction", "Transactions",

            // Variations pour comptes
            "compte", "comptes", "compte_cheque", "comptes_cheque",
            "compte_epargne", "comptes_epargne", "compte_credit", "comptes_credit",
            "compte_dette", "comptes_dette"
        )

        val collectionsExistantes = mutableListOf<String>()

        // Phase 1: D√©couvrir quelles collections existent vraiment
        println("[RESET INTELLIGENT] üîç Test de ${nomsCollectionsPossibles.size} noms possibles...")

        for (nomCollection in nomsCollectionsPossibles) {
            try {
                val response = client.effectuerRequeteGet("/api/collections/$nomCollection/records", mapOf("perPage" to "1"))
                // Si on arrive ici sans erreur 404, la collection existe !
                collectionsExistantes.add(nomCollection)
                println("[RESET INTELLIGENT] ‚úÖ Collection trouv√©e: $nomCollection")
            } catch (e: Exception) {
                if (e.message?.contains("404") == true) {
                    // Collection n'existe pas, c'est normal
                } else {
                    println("[RESET INTELLIGENT] ‚ö†Ô∏è Erreur pour $nomCollection: ${e.message}")
                }
            }
        }

        println("[RESET INTELLIGENT] üéØ Collections existantes: ${collectionsExistantes.joinToString(", ")}")

        // Phase 2: Supprimer SEULEMENT tes donn√©es dans chaque collection
        for (collection in collectionsExistantes) {
            try {
                println("[RESET INTELLIGENT] üóëÔ∏è Nettoyage de la collection: $collection")

                // R√©cup√©rer TOUS les √©l√©ments de cette collection
                val response = client.effectuerRequeteGet("/api/collections/$collection/records", mapOf(
                    "perPage" to "500"
                ))

                val jsonResponse = gson.fromJson(response, JsonObject::class.java)
                val items = jsonResponse.getAsJsonArray("items")

                println("[RESET INTELLIGENT] üìã Trouv√© ${items.size()} √©l√©ments dans $collection")

                if (items.size() > 0) {
                    items.forEach { item: JsonElement ->
                        try {
                            val obj = item.asJsonObject
                            val id = obj.get("id").asString
                            val nom = obj.get("nom")?.asString
                                ?: obj.get("name")?.asString
                                ?: obj.get("titre")?.asString
                                ?: "√âl√©ment"
                            val itemUserId = obj.get("utilisateur_id")?.asString

                            println("[RESET INTELLIGENT] üîç $collection: $nom (User: ${itemUserId ?: "AUCUN"})")

                            // SUPPRIMER SEULEMENT SI C'EST TON UTILISATEUR
                            if (itemUserId == userId) {
                                try {
                                    client.effectuerRequeteDelete("/api/collections/$collection/records/$id")
                                    totalSupprime++
                                    println("[RESET INTELLIGENT] ‚úÖ SUPPRIM√â: $nom (ton utilisateur)")
                                } catch (deleteE: Exception) {
                                    println("[RESET INTELLIGENT] ‚ùå Erreur suppression $nom: ${deleteE.message}")
                                }
                            } else {
                                println("[RESET INTELLIGENT] ‚è≠Ô∏è IGNOR√â: $nom (utilisateur: $itemUserId)")
                            }

                        } catch (e: Exception) {
                            println("[RESET INTELLIGENT] ‚ùå Erreur traitement √©l√©ment: ${e.message}")
                        }
                    }
                } else {
                    println("[RESET INTELLIGENT] ‚ö†Ô∏è Collection $collection vide")
                }

            } catch (e: Exception) {
                println("[RESET INTELLIGENT] ‚ùå Erreur pour collection $collection: ${e.message}")
            }
        }

        println("[RESET INTELLIGENT] üß† D√âCOUVERTE ET NETTOYAGE TERMIN√âS!")
        println("[RESET INTELLIGENT] üìä Collections d√©couvertes: ${collectionsExistantes.size}")
        println("[RESET INTELLIGENT] üìä √âl√©ments supprim√©s pour TOI: $totalSupprime")

        if (totalSupprime == 0) {
            println("[RESET INTELLIGENT] ‚ö†Ô∏è Aucune donn√©e trouv√©e pour ton utilisateur $userId")
            println("[RESET INTELLIGENT] üìã Collections test√©es: ${collectionsExistantes.joinToString(", ")}")
        } else {
            println("[RESET INTELLIGENT] üéâ SUCC√àS! $totalSupprime √©l√©ments supprim√©s pour TOI SEULEMENT!")
        }
    }
}
