package com.xburnsx.toutiebudget

import android.app.Application
import com.xburnsx.toutiebudget.di.AppModule
import com.xburnsx.toutiebudget.workers.SyncWorkManager
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

/**
 * Classe Application personnalis√©e pour ToutieBudget
 * Responsable de l'initialisation de la base de donn√©es Room
 * üÜï MODE HORS LIGNE : Surveillance automatique de la connectivit√© r√©seau
 */
class ToutieBudgetApplication : Application() {
    
    companion object {
        private var instance: ToutieBudgetApplication? = null
        
        fun getInstance(): ToutieBudgetApplication? {
            return instance
        }
    }
    
    override fun onCreate() {
        super.onCreate()
        instance = this
        
        // Initialiser la base de donn√©es Room
        AppModule.initializeDatabase(this)
        
        // üÜï NOUVEAU : D√©marrer la surveillance de la connectivit√© r√©seau
        // Cela permettra la synchronisation automatique quand internet revient
        demarrerSurveillanceReseau()
        
        // D√âMARRER LA SYNCHRONISATION AUTOMATIQUE QUAND INTERNET REVIENT
        // Le worker se d√©clenchera automatiquement d√®s que la connectivit√© est r√©tablie
        SyncWorkManager.planifierSynchronisationAutomatique(this)
        
        // üÜï V√âRIFIER ET TRAITER LES SYNCJOB EXISTANTS √Ä L'OUVERTURE
        // Si il y a des t√¢ches en attente, on les traite imm√©diatement
        verifierEtTraiterSyncJobExistants()
    }
    
    /**
     * üÜï NOUVEAU : D√©marre la surveillance de la connectivit√© r√©seau
     * Permet la synchronisation automatique d√®s qu'internet revient
     */
    private fun demarrerSurveillanceReseau() {
        try {
            val networkService = AppModule.provideNetworkConnectivityService(this)
            networkService.startNetworkMonitoring()
            // ‚úÖ Surveillance r√©seau d√©marr√©e
        } catch (e: Exception) {
            // ‚ùå Erreur lors du d√©marrage de la surveillance r√©seau
        }
    }
    
    /**
     * V√©rifie s'il y a des SyncJob en attente et les traite imm√©diatement
     */
    private fun verifierEtTraiterSyncJobExistants() {
        // Utiliser une coroutine pour v√©rifier les SyncJob en arri√®re-plan
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val syncJobDao = AppModule.provideSyncJobDao(this@ToutieBudgetApplication)
                val syncJobsEnAttente = syncJobDao.getPendingSyncJobs()
                
                if (syncJobsEnAttente.isNotEmpty()) {
                    // üöÄ ${syncJobsEnAttente.size} SyncJob en attente d√©tect√©s √† l'ouverture
                    
                    // D√âCLENCHER IMM√âDIATEMENT LA SYNCHRONISATION
                    // Le worker se d√©clenchera et traitera tous les SyncJob en attente
                    SyncWorkManager.declencherSynchronisationAutomatique(this@ToutieBudgetApplication)
                } else {
                    // ‚úÖ Aucun SyncJob en attente √† l'ouverture
                }
            } catch (e: Exception) {
                // ‚ùå Erreur lors de la v√©rification des SyncJob
            }
        }
    }
}
