// chemin/simule: app/src/main/java/com/xburnsx/toutiebudget/domain/services/ArchitectureRules.kt
// D√©pendances: Documentation des r√®gles pour √©viter que l'IA se trompe

package com.xburnsx.toutiebudget.domain.services

/**
 * üéØ R√àGLES CLAIRES POUR L'ARCHITECTURE ALLOCATION VS TRANSACTION
 *
 * Ces r√®gles DOIVENT √™tre respect√©es pour √©viter que l'IA fasse n'importe quoi !
 */

// =====================================================
// üìÖ ALLOCATION MENSUELLE - Pour le budget du mois
// =====================================================

/**
 * ‚úÖ QUAND CR√âER UNE ALLOCATION MENSUELLE :
 *
 * 1. Placer de l'argent dans une enveloppe
 *    - Exemple: "Placer 100$ dans √©picerie"
 *    - Action: Cr√©er NOUVELLE AllocationMensuelle avec solde=+100$
 *
 * 2. D√©penser depuis une enveloppe
 *    - Exemple: "D√©penser 50$ √©picerie"
 *    - Action: Cr√©er NOUVELLE AllocationMensuelle avec solde=-50$
 *
 * 3. Virement entre enveloppes du m√™me mois
 *    - Exemple: "Virer 20$ √©picerie ‚Üí essence"
 *    - Action: 2 NOUVELLES AllocationMensuelle (une -20$, une +20$)
 *
 * 4. Rollover automatique d√©but de mois
 *    - Exemple: Passer de juillet √† ao√ªt
 *    - Action: Cr√©er NOUVELLES AllocationMensuelle pour ao√ªt
 */

/**
 * ‚ùå CE QU'IL NE FAUT JAMAIS FAIRE AVEC ALLOCATION :
 *
 * - JAMAIS modifier une allocation existante
 * - JAMAIS utiliser mettreAJourAllocation() pour ajouter de l'argent
 * - JAMAIS recupererOuCreerAllocation() pour les virements
 *
 * üîë R√àGLE D'OR : TOUJOURS cr√©er une NOUVELLE allocation !
 */

// =====================================================
// üìä TRANSACTION - Pour l'historique permanent
// =====================================================

/**
 * ‚úÖ QUAND CR√âER UNE TRANSACTION :
 *
 * 1. TOUJOURS en parall√®le d'une AllocationMensuelle
 *    - But: Tra√ßabilit√© et historique
 *
 * 2. Mouvements de comptes
 *    - Exemple: Salaire re√ßu, virement bancaire
 *    - Action: Transaction pour l'historique du compte
 *
 * 3. Actions utilisateur importantes
 *    - Exemple: "Utilisateur a plac√© 100$ √©picerie depuis compte ch√®que"
 *    - Action: Transaction avec description claire
 */

/**
 * üéØ STRUCTURE D'UNE ACTION COMPL√àTE :
 *
 * Exemple: "Placer 50$ dans √©picerie depuis compte ch√®que"
 *
 * √âtape 1: AllocationMensuelle
 * - enveloppeId: "epicerie_id"
 * - mois: "2025-07-01 00:00:00" (premier jour du mois)
 * - solde: +50.0 (ajout √† l'enveloppe)
 * - compteSourceId: "compte_cheque_id"
 *
 * √âtape 2: Transaction (parall√®le)
 * - description: "Allocation vers √©picerie"
 * - montant: 50.0
 * - compteId: "compte_cheque_id" (historique du compte)
 * - allocationMensuelleId: [ID de l'allocation cr√©√©e]
 * - date: aujourd'hui
 *
 * √âtape 3: Mise √† jour compte
 * - Diminuer "pret_a_placer" du compte ch√®que de 50$
 */

// =====================================================
// üêõ ERREURS COMMUNES DE L'IA √Ä √âVITER
// =====================================================

/**
 * ‚ùå ERREUR 1: Confondre les r√¥les
 * Mauvais:
 * ```
 * // L'IA cr√©e Transaction au lieu d'AllocationMensuelle
 * transactionRepository.creerTransaction(...)  // ‚ùå Faux !
 * ```
 *
 * Correct:
 * ```
 * // D'abord AllocationMensuelle pour le budget
 * allocationRepository.creerNouvelleAllocation(...)  // ‚úÖ
 * // Puis Transaction pour l'historique
 * transactionRepository.creerTransaction(...)        // ‚úÖ
 * ```
 */

/**
 * ‚ùå ERREUR 2: Modifier au lieu de cr√©er
 * Mauvais:
 * ```
 * // L'IA modifie allocation existante
 * allocationRepository.mettreAJourAllocation(...)  // ‚ùå Faux !
 * ```
 *
 * Correct:
 * ```
 * // Toujours cr√©er une nouvelle allocation
 * allocationRepository.creerNouvelleAllocation(...)  // ‚úÖ
 * ```
 */

/**
 * ‚ùå ERREUR 3: Oublier le parall√©lisme
 * Mauvais:
 * ```
 * // L'IA cr√©e seulement AllocationMensuelle
 * creerNouvelleAllocation(...)  // ‚ùå Incomplet !
 * ```
 *
 * Correct:
 * ```
 * // Les deux sont n√©cessaires
 * creerNouvelleAllocation(...)  // ‚úÖ Pour le budget
 * creerTransaction(...)         // ‚úÖ Pour l'historique
 * ```
 */

// =====================================================
// üîß TEMPLATE POUR L'IA
// =====================================================

/**
 * TEMPLATE √Ä SUIVRE POUR TOUTE ACTION BUDGET :
 *
 * suspend fun actionBudget(parametres...) {
 *   try {
 *     // 1. Valider les donn√©es
 *     // ...
 *
 *     // 2. Cr√©er NOUVELLE AllocationMensuelle (jamais modifier !)
 *     val nouvelleAllocation = AllocationMensuelle(
 *       id = "",  // PocketBase g√©n√®re
 *       enveloppeId = enveloppeId,
 *       mois = premierJourDuMois(Date()),
 *       solde = montantSigne,  // +50$ ou -50$
 *       // ... autres champs
 *     )
 *     val allocationCreee = allocationRepository.creerNouvelleAllocation(nouvelleAllocation)
 *
 *     // 3. Cr√©er Transaction pour historique
 *     val transaction = Transaction(
 *       id = "",  // PocketBase g√©n√®re
 *       description = "Description claire",
 *       montant = montant,
 *       compteId = compteId,
 *       allocationMensuelleId = allocationCreee.id,
 *       date = Date()
 *     )
 *     transactionRepository.creerTransaction(transaction)
 *
 *     // 4. Mettre √† jour soldes comptes si n√©cessaire
 *     if (impacteCompte) {
 *       compteRepository.mettreAJourPretAPlacerSeulement(compteId, -montant)
 *     }
 *
 *   } catch (e: Exception) {
 *     // Gestion erreur
 *   }
 * }
 */

// =====================================================
// üéØ POINTS DE CONTR√îLE POUR L'IA
// =====================================================

/**
 * CHECKLIST AVANT CHAQUE ACTION :
 *
 * ‚úÖ Est-ce que je cr√©e une NOUVELLE AllocationMensuelle ?
 * ‚úÖ Est-ce que je cr√©e AUSSI une Transaction ?
 * ‚úÖ Est-ce que j'utilise le bon format de date ?
 * ‚úÖ Est-ce que je ne modifie PAS d'allocation existante ?
 * ‚úÖ Est-ce que les montants ont le bon signe (+/-) ?
 *
 * Si une seule r√©ponse est NON ‚Üí L'architecture n'est pas respect√©e !
 */