// D√©finit le package auquel ce fichier appartient. C'est l'organisation de base des fichiers dans un projet Android.
package com.xburnsx.toutiebudget.ui.budget.composants

// Importations des biblioth√®ques n√©cessaires pour cr√©er des interfaces utilisateur avec Jetpack Compose.
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.IntrinsicSize
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.xburnsx.toutiebudget.ui.budget.EnveloppeUi
import com.xburnsx.toutiebudget.ui.budget.StatutObjectif
import com.xburnsx.toutiebudget.utils.MoneyFormatter
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.Locale
import androidx.core.graphics.toColorInt

/**
 * Fonction d'extension pour la classe String.
 * Elle convertit une cha√Æne de caract√®res repr√©sentant une couleur hexad√©cimale (ex: "#FF5733") en un objet Color de Compose.
 * Utilise un bloc try-catch pour √©viter que l'application ne plante si la cha√Æne n'est pas une couleur valide,
 * et retourne Color.Gray par d√©faut en cas d'erreur.
 */
fun String?.toColor(): Color {
    return try {
        // V√©rification de s√©curit√© pour √©viter NullPointerException
        if (this.isNullOrBlank()) {
            return Color.Gray
        }
        // Tente de parser la cha√Æne en une couleur Android native, puis la convertit en couleur Compose.
        Color(this.toColorInt())
    } catch (_: Exception) {
        // Si le format est invalide (ex: "bleu" au lieu de "#0000FF"), retourne une couleur grise par d√©faut.
        Color.Gray
    }
}

/**
 * Le composant principal qui repr√©sente une seule "enveloppe" budg√©taire dans la liste.
 * @param enveloppe L'objet de donn√©es contenant toutes les informations sur l'enveloppe √† afficher.
 */
@Composable
fun EnveloppeItem(enveloppe: EnveloppeUi) {
    // R√©cup√®re le solde actuel de l'enveloppe.
    // üéØ UTILISER LA NORMALISATION GLOBALE POUR UNE PR√âCISION COH√âRENTE
    val montant = MoneyFormatter.normalizeAmount(enveloppe.solde)
    // R√©cup√®re le montant de l'objectif, s'il y en a un.
    val objectif = enveloppe.objectif

    // --- LOGIQUE POUR D√âTERMINER SI L'OBJECTIF EST ATTEINT ---
    val estObjectifAtteint = when (enveloppe.typeObjectif) {
        // Pour les objectifs de d√©pense : v√©rifier si depense >= objectif (pas alloue + depense !)
        com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> enveloppe.depense >= objectif
        // Pour les objectifs d'√©pargne/accumulation : v√©rifier si alloueCumulatif >= objectif
        else -> enveloppe.alloueCumulatif >= objectif
    }

    // --- LOGIQUE POUR LA BULLE DE MONTANT ---
    // D√©termine la couleur de fond de la bulle qui affiche le solde.
    val couleurBulle = when {
        // Rouge pour soldes n√©gatifs (seulement si vraiment n√©gatif, pas juste proche de z√©ro)
        enveloppe.solde < -0.001 -> Color(0xFFEF4444) // Rouge pour n√©gatif
        // Si le solde est positif et une couleur est d√©finie, on utilise cette couleur.
        enveloppe.solde > 0.001 -> enveloppe.couleurProvenance.toColor()
        // Sinon (solde √† z√©ro ou tr√®s proche de z√©ro), on utilise un gris fonc√©.
        else -> Color(0xFF444444)
    }

    // D√©termine la couleur du texte dans la bulle.
    val couleurTexteBulle = when {
        enveloppe.solde < -0.001 -> Color.White // Texte blanc pour le rouge
        enveloppe.solde > 0.001 -> Color.White // Texte blanc pour les couleurs
        else -> Color.LightGray // Texte gris clair pour le gris
    }

    // --- LOGIQUE POUR LA BARRE LAT√âRALE DE STATUT ---
    // D√©termine la couleur de la barre verticale √† droite de la carte, indiquant le statut global.
    // M√äME LOGIQUE QUE LA BARRE DE PROGRESSION pour la coh√©rence
    val couleurStatut = when {
        // Objectif atteint : Vert ou couleur du compte source si d√©pens√©
        estObjectifAtteint -> {
            when (enveloppe.typeObjectif) {
                com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> {
                    if (enveloppe.depense >= objectif) enveloppe.couleurProvenance?.toColor() ?: Color(0xFF4CAF50) else Color(0xFF4CAF50)
                }
                else -> Color(0xFF4CAF50) // Vert pour les objectifs d'√©pargne atteints
            }
        }
        // Vert si objectif atteint (m√™me logique que barre de progression)
        when (enveloppe.typeObjectif) {
            com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> enveloppe.alloue >= objectif
            else -> enveloppe.alloueCumulatif >= objectif
        } -> Color(0xFF4CAF50)
        // Jaune si en cours (m√™me logique que barre de progression)
        when (enveloppe.typeObjectif) {
            com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> enveloppe.alloue > 0.001
            else -> enveloppe.alloueCumulatif > 0.001
        } -> Color(0xFFFFC107)
        // Gris si pas d'argent
        else -> Color.Gray
    }

    // D√©finit la forme de la carte avec des coins arrondis de 20.dp.
    val cardShape = RoundedCornerShape(20.dp)

    // Le composant Card est le conteneur principal de l'item.
    Card(
        modifier = Modifier
            .fillMaxWidth() // La carte prend toute la largeur de son parent.
            .padding(horizontal = 8.dp, vertical = 6.dp), // Ajoute de l'espace autour de la carte.
        shape = cardShape, // Applique la forme avec coins arrondis d√©finie plus haut.
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp), // Ajoute une l√©g√®re ombre sous la carte.
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFF232323) // D√©finit la couleur de fond de la carte.
        )
    ) {
        // Row arrange ses enfants (la colonne de texte et la barre de statut) horizontalement.
        Row(
            modifier = Modifier
                .fillMaxWidth() // Prend toute la largeur.
                .height(IntrinsicSize.Min), // La hauteur de la Row sera la hauteur minimale n√©cessaire pour contenir ses enfants.
            verticalAlignment = Alignment.CenterVertically // Centre les enfants verticalement.
        ) {
            // Column pour la partie principale, avec le nom, le montant et la barre de progression.
            Column(
                modifier = Modifier
                    .weight(1f) // La colonne prend tout l'espace disponible dans la Row (apr√®s que la barre de statut ait pris sa largeur fixe).
                    .padding(horizontal = 16.dp, vertical = 12.dp) // Espace int√©rieur.
                // SUPPRIM√â verticalArrangement = Arrangement.spacedBy((-2).dp) - plus besoin !
            ) {
                // Row pour le nom de l'enveloppe et la bulle de montant.
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically // Aligne le nom et la bulle sur la m√™me ligne verticale.
                ) {
                    // Texte affichant le nom de l'enveloppe.
                    Text(
                        text = enveloppe.nom,
                        fontWeight = FontWeight.Bold, // Texte en gras.
                        fontSize = 15.sp,
                        lineHeight = 15.sp, // SUPPRIME l'espace vertical interne
                        color = Color.White,
                        modifier = Modifier.weight(1f) // Le texte prend l'espace restant pour pousser la bulle √† droite.
                    )

                    // --- BULLE DE MONTANT (R√âDUITE) ---
                    // Box est utilis√© comme conteneur pour la bulle afin de pouvoir lui donner un fond et une forme.
                    Box(
                        modifier = Modifier
                            .clip(RoundedCornerShape(50)) // D√©coupe la Box en une forme de pilule (coins tr√®s arrondis).
                            .background(couleurBulle) // Applique la couleur de fond calcul√©e plus t√¥t.
                            .padding(horizontal = 12.dp, vertical = 4.dp) // Espace r√©duit √† l'int√©rieur de la bulle.
                    ) {
                        // Texte affichant le montant format√© en devise.
                        Text(
                            text = MoneyFormatter.formatAmount(montant),
                            color = couleurTexteBulle, // Applique la couleur de texte calcul√©e.
                            fontWeight = FontWeight.Bold,
                            fontSize = 14.sp, // Taille r√©duite
                            lineHeight = 14.sp // SUPPRIME l'espace vertical interne
                        )
                    }
                }

                // Afficher le montant d√©pens√© sur toutes les enveloppes (pas seulement celles avec objectif)
                if (enveloppe.depense > 0) {
                    Spacer(modifier = Modifier.height(2.dp)) // ESPACE CONTR√îL√â entre nom et d√©pens√©

                    // Afficher le montant d√©pens√©
                    Text(
                        text = "D√©pens√©: ${MoneyFormatter.formatAmount(enveloppe.depense)}",
                        color = Color(0xFFFF6B6B), // Couleur rouge/orange pour les d√©penses
                        fontSize = 11.sp,
                        lineHeight = 11.sp, // SUPPRIME l'espace vertical interne
                        fontWeight = FontWeight.Medium
                    )
                }

                // Afficher le texte de l'objectif directement sous le nom si un objectif est d√©fini
                if (objectif > 0) {
                    Spacer(modifier = Modifier.height(2.dp)) // ESPACE CONTR√îL√â entre d√©pens√© et objectif

                    // Row pour le texte de l'objectif et le pourcentage
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        // Texte de l'objectif adapt√© selon le type
                        val texteObjectif = when (enveloppe.typeObjectif) {
                                                         com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Echeance -> {
                                 val dateFormatee = enveloppe.dateObjectif?.toDateFormatee()
                                 val dateTexte = dateFormatee?.toStringCourt() ?: "date limite"
                                 if (enveloppe.alloueCumulatif >= objectif) { // ‚Üê MODIFI√â : alloueCumulatif
                                     "Objectif atteint pour le $dateTexte"
                                 } else {
                                     "Objectif: ${MoneyFormatter.formatAmount(objectif)} pour le ${dateFormatee?.toStringCourtAvecAnnee() ?: "date limite"}"
                                 }
                             }
                            com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Annuel -> {
                                                                                                  // dateObjectif est d√©j√† la date de fin de l'objectif annuel
                                 val dateFinAnnuel = enveloppe.dateObjectif?.let { dateString ->
                                     try {
                                         
                                         val dateFin = when {
                                             dateString.contains("T") -> {
                                                 val isoFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault())
                                                 isoFormat.parse(dateString)
                                             }
                                             dateString.contains(" ") -> {
                                                 // Essayer d'abord le format avec Z
                                                 try {
                                                     val spaceFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS'Z'", Locale.getDefault())
                                                     spaceFormat.parse(dateString)
                                                 } catch (_: Exception) {
                                                     // Si √ßa √©choue, essayer le format sans Z
                                                     try {
                                                         val spaceFormatSansZ = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
                                                         spaceFormatSansZ.parse(dateString)
                                                     } catch (_: Exception) {
                                                         null
                                                     }
                                                 }
                                             }
                                             dateString.matches(Regex("""\d{4}-\d{2}-\d{2}""")) -> {
                                                 val simpleFormat =
                                                     SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
                                                 simpleFormat.parse(dateString)
                                             }
                                             else -> null
                                         }

                                                                                  if (dateFin != null) {
                                              // Utiliser directement la date de fin (pas besoin d'ajouter 1 an)
                                              val dateFormatee = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(dateFin)
                                              dateFormatee.toDateFormatee()
                                          } else null
                                     } catch (_: Exception) {
                                         null
                                     }
                                 }

                                if (enveloppe.alloueCumulatif >= objectif) { // ‚Üê MODIFI√â : alloueCumulatif
                                     "Objectif annuel atteint: ${MoneyFormatter.formatAmount(objectif)} pour le ${dateFinAnnuel?.toStringCourtAvecAnnee() ?: "fin d'ann√©e"}"
                                 } else {
                                     "Objectif annuel: ${MoneyFormatter.formatAmount(objectif)} jusqu'au ${dateFinAnnuel?.toStringCourtAvecAnnee() ?: "fin d'ann√©e"}"
                                 }
                            }
                            com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> {
                                val dateTexte = when {
                                    // Si on a stock√© juste le jour (ex: "10"), on l'affiche tel quel
                                    enveloppe.dateObjectif?.matches(Regex("\\d{1,2}")) == true -> "le ${enveloppe.dateObjectif}"
                                    else -> {
                                        val df = enveloppe.dateObjectif?.toDateFormatee()
                                        df?.toStringCourt() ?: "fin du mois"
                                    }
                                }
                                if (enveloppe.alloueCumulatif >= objectif) {
                                    "Objectif mensuel atteint: ${MoneyFormatter.formatAmount(objectif)} pour $dateTexte"
                                } else {
                                    "${MoneyFormatter.formatAmount(objectif)} pour $dateTexte"
                                }
                            }
                            com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Bihebdomadaire -> {
                                val dateFormatee = enveloppe.dateObjectif?.toDateFormatee()
                                val dateTexte = dateFormatee?.toStringCourt() ?: "date limite"
                                if (enveloppe.alloueCumulatif >= objectif) { // ‚Üê MODIFI√â : alloueCumulatif
                                    "Objectif de p√©riode atteint: ${MoneyFormatter.formatAmount(objectif)}"
                                } else {
                                    "Objectif / 2 sem: ${MoneyFormatter.formatAmount(objectif)} pour le $dateTexte"
                                }
                            }
                            else -> {
                                // Pour TypeObjectif.Aucun et autres cas non g√©r√©s
                                "Objectif: ${MoneyFormatter.formatAmount(objectif)}"
                            }
                        }

                        Text(
                            text = texteObjectif,
                            color = Color.LightGray,
                            fontSize = 12.sp,
                            lineHeight = 12.sp, // SUPPRIME l'espace vertical interne
                            modifier = Modifier.weight(1f)
                        )

                        // Calculs pour le pourcentage
                        val progression = if (estObjectifAtteint) {
                            1.0f
                        } else {
                            when (enveloppe.typeObjectif) {
                                com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> (enveloppe.alloue / objectif).coerceIn(0.0, 1.0).toFloat()
                                else -> (enveloppe.alloueCumulatif / objectif).coerceIn(0.0, 1.0).toFloat()
                            }
                        }

                                                 // Couleur de la barre de progression
                         val couleurBarreProgression = when {
                             estObjectifAtteint -> {
                                 when (enveloppe.typeObjectif) {
                                     com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> {
                                         if (enveloppe.depense >= objectif) enveloppe.couleurProvenance?.toColor() ?: Color(0xFF4CAF50) else Color(0xFF4CAF50)
                                     }
                                     else -> Color(0xFF4CAF50) // Vert pour les objectifs d'√©pargne atteints
                                 }
                             }
                             when (enveloppe.typeObjectif) {
                                 com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> enveloppe.alloue >= objectif
                                 else -> enveloppe.alloueCumulatif >= objectif
                             } -> Color(0xFF4CAF50) // Vert si objectif atteint
                             when (enveloppe.typeObjectif) {
                                 com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> enveloppe.alloue > 0.001
                                 else -> enveloppe.alloueCumulatif > 0.001
                             } -> Color(0xFFFFC107) // Jaune si en cours
                             else -> Color.Gray // Gris si pas d'argent
                         }

                        // Pourcentage √† droite
                        val progressionEntiere = (progression * 100).toInt()
                        val texteAffichage = if(estObjectifAtteint) {
                            when (enveloppe.typeObjectif) {
                                com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> {
                                    if (enveloppe.depense >= objectif) "D√©pens√© ‚úì" else "Bravo ! ‚úì"
                                }
                                else -> "Objectif ‚úì"
                            }
                        } else {
                            if (progressionEntiere < 100) {
                                "$progressionEntiere %"
                            } else {
                                "Meow ! ‚úì"
                            }
                        }

                        val couleurTexte = if (progressionEntiere == 0 && !estObjectifAtteint) {
                            Color.LightGray
                        } else {
                            couleurBarreProgression
                        }

                        Text(
                            text = texteAffichage,
                            color = couleurTexte,
                            fontWeight = if (estObjectifAtteint) FontWeight.Bold else FontWeight.Medium,
                            fontSize = 12.sp,
                            lineHeight = 12.sp // SUPPRIME l'espace vertical interne
                        )
                    }

                    Spacer(modifier = Modifier.height(3.dp)) // ESPACE CONTR√îL√â entre objectif et barre

                    // Barre de progression directement sous le texte
                    val progressionAnimee by animateFloatAsState(
                        targetValue = if (estObjectifAtteint) 1.0f else {
                            when (enveloppe.typeObjectif) {
                                com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> (enveloppe.alloue / objectif).coerceIn(0.0, 1.0).toFloat()
                                else -> (enveloppe.alloueCumulatif / objectif).coerceIn(0.0, 1.0).toFloat()
                            }
                        },
                        label = "Animation Barre de Progression"
                    )

                                         val couleurBarre = when {
                         estObjectifAtteint -> {
                             when (enveloppe.typeObjectif) {
                                 com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> {
                                     if (enveloppe.depense >= objectif) enveloppe.couleurProvenance?.toColor() ?: Color(0xFF4CAF50) else Color(0xFF4CAF50)
                                 }
                                 else -> Color(0xFF4CAF50) // Vert pour les objectifs d'√©pargne atteints
                             }
                         }
                         when (enveloppe.typeObjectif) {
                             com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> enveloppe.alloue >= objectif
                             else -> enveloppe.alloueCumulatif >= objectif
                         } -> Color(0xFF4CAF50) // Vert si objectif atteint
                         when (enveloppe.typeObjectif) {
                             com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel -> enveloppe.alloue > 0.001
                             else -> enveloppe.alloueCumulatif > 0.001
                         } -> Color(0xFFFFC107) // Jaune si en cours
                         else -> Color.Gray // Gris si pas d'argent
                     }

                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(6.dp)
                            .clip(RoundedCornerShape(50))
                            .background(Color(0xFF333333))
                    ) {
                        Box(
                            modifier = Modifier
                                .fillMaxWidth(fraction = progressionAnimee)
                                .height(6.dp)
                                .clip(RoundedCornerShape(50))
                                .background(couleurBarre)
                        )
                    }

                    // AJOUT: Afficher le versement recommand√© SEULEMENT pour certains types d'objectifs
                    if (enveloppe.versementRecommande > 0 && enveloppe.typeObjectif != com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel) {
                        Spacer(modifier = Modifier.height(4.dp))
                        Text(
                            text = "Sugg√©r√©: ${MoneyFormatter.formatAmount(enveloppe.versementRecommande)}",
                            color = Color(0xFF82DD86), // Vert clair pour la suggestion
                            fontSize = 11.sp,
                            fontWeight = FontWeight.Medium,
                            modifier = Modifier.align(Alignment.End) // Aligner √† droite
                        )
                    }
                }
            }

            // Box pour la barre de statut verticale √† droite.
            Box(
                modifier = Modifier
                    .fillMaxHeight() // Remplit toute la hauteur de la carte.
                    .width(8.dp) // Largeur fixe.
                    .background(couleurStatut) // Applique la couleur de statut calcul√©e au d√©but.
            )
        }
    }
}


/**
 * Fonction d'aper√ßu pour Android Studio.
 * Elle n'est pas utilis√©e dans l'application finale mais permet de visualiser le composant `EnveloppeItem`
 * avec diff√©rentes donn√©es sans avoir √† lancer l'application sur un √©mulateur ou un appareil.
 */
@Preview(showBackground = true) // Affiche un fond derri√®re l'aper√ßu.
@Composable
fun ApercuEnveloppeItem() {
    // Un Box avec un fond sombre pour simuler le th√®me de l'application.
    Box(modifier = Modifier.background(Color(0xFF121212))) {
        // Une colonne pour afficher plusieurs exemples d'EnveloppeItem les uns sous les autres.
        Column(
            modifier = Modifier.padding(vertical = 8.dp)
        ) {
            // --- EXEMPLES DES DIFF√âRENTS TYPES D'OBJECTIFS ---

            // 1. OBJECTIF ANNUEL - En cours
            EnveloppeItem(
                enveloppe = EnveloppeUi(
                    id = "1",
                    nom = "üè† Objectif Annuel",
                    solde = 250.0,
                    depense = 0.0,
                    alloue = 200.0, // Exemple d'allocation ce mois
                    alloueCumulatif = 800.0, // ‚Üê NOUVEAU : Total allou√© depuis le d√©but
                    objectif = 1200.0,
                    couleurProvenance = "#E91E63", // rose
                    statutObjectif = StatutObjectif.JAUNE,
                    versementRecommande = 95.0,
                    typeObjectif = com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Annuel
                )
            )

            // 2. OBJECTIF MENSUEL - En cours
            EnveloppeItem(
                enveloppe = EnveloppeUi(
                    id = "2",
                    nom = "üçî Objectif Mensuel",
                    solde = 300.0,
                    depense = 50.0,
                    alloue = 350.0, // Exemple d'allocation ce mois
                    alloueCumulatif = 400.0, // ‚Üê NOUVEAU : Total allou√© depuis le d√©but
                    objectif = 500.0,
                    couleurProvenance = "#2196F3", // bleu
                    statutObjectif = StatutObjectif.JAUNE,
                    versementRecommande = 0.0,
                    typeObjectif = com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel
                )
            )

            // 3. OBJECTIF √âCH√âANCE - En cours
            EnveloppeItem(
                enveloppe = EnveloppeUi(
                    id = "3",
                    nom = "üöó Objectif √âch√©ance",
                    solde = 800.0,
                    depense = 0.0,
                    alloue = 750.0, // Exemple d'allocation ce mois
                    alloueCumulatif = 1500.0, // ‚Üê NOUVEAU : Total allou√© depuis le d√©but
                    objectif = 2000.0,
                    couleurProvenance = "#FF9800", // orange
                    statutObjectif = StatutObjectif.JAUNE,
                    versementRecommande = 120.0,
                    typeObjectif = com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Echeance,
                    dateObjectif = "15"
                )
            )

            // 4. OBJECTIF BIHEBDOMADAIRE - En cours
            EnveloppeItem(
                enveloppe = EnveloppeUi(
                    id = "4",
                    nom = "üíº Objectif Bihebdomadaire",
                    solde = 150.0,
                    depense = 25.0,
                    alloue = 175.0, // Exemple d'allocation ce mois
                    alloueCumulatif = 200.0, // ‚Üê NOUVEAU : Total allou√© depuis le d√©but
                    objectif = 300.0,
                    couleurProvenance = "#4CAF50", // vert
                    statutObjectif = StatutObjectif.JAUNE,
                    versementRecommande = 75.0,
                    typeObjectif = com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Bihebdomadaire
                )
            )

            // 5. OBJECTIF ANNUEL - Atteint
            EnveloppeItem(
                enveloppe = EnveloppeUi(
                    id = "5",
                    nom = "üéØ Annuel Atteint ‚úì",
                    solde = 1200.0,
                    depense = 0.0,
                    alloue = 0.0, // Exemple d'allocation ce mois (d√©j√† atteint)
                    alloueCumulatif = 1200.0, // ‚Üê NOUVEAU : Total allou√© depuis le d√©but (objectif atteint)
                    objectif = 1200.0,
                    couleurProvenance = "#9C27B0", // violet
                    statutObjectif = StatutObjectif.VERT,
                    versementRecommande = 0.0,
                    typeObjectif = com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Annuel
                )
            )

            // 6. OBJECTIF MENSUEL - Atteint
            EnveloppeItem(
                enveloppe = EnveloppeUi(
                    id = "6",
                    nom = "üí≥ Mensuel Atteint ‚úì",
                    solde = 500.0,
                    depense = 100.0,
                    alloue = 100.0, // Exemple d'allocation ce mois
                    alloueCumulatif = 600.0, // ‚Üê NOUVEAU : Total allou√© depuis le d√©but (objectif d√©pass√©)
                    objectif = 500.0,
                    couleurProvenance = "#607D8B", // bleu-gris
                    statutObjectif = StatutObjectif.VERT,
                    versementRecommande = 0.0,
                    typeObjectif = com.xburnsx.toutiebudget.data.modeles.TypeObjectif.Mensuel
                )
            )
        }
    }
}

/**
 * Classe pour repr√©senter une date format√©e avec jour, mois et ann√©e
 */
data class DateFormatee(
    val jour: Int,
    val mois: String,
    val annee: Int,
    val jourTexte: String // ex: "15", "1er", "2e", etc.
) {
    fun toStringCourt(): String = "$jourTexte $mois"
    fun toStringCourtAvecAnnee(): String = "$jourTexte $mois $annee"
}

/**
 * Fonction d'extension pour convertir une cha√Æne de date en DateFormatee
 */
fun String?.toDateFormatee(): DateFormatee? {
    return try {
        if (this.isNullOrBlank()) return null

        // Parser la date depuis diff√©rents formats possibles
        val date = when {
            this.contains("T") -> {
                // Format ISO complet avec T (ex: "2025-08-09T00:00:00.000Z")
                val isoFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault())
                isoFormat.parse(this)
            }
                         this.contains(" ") -> {
                 // Essayer d'abord le format avec Z
                 try {
                     val spaceFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS'Z'", Locale.getDefault())
                     spaceFormat.parse(this)
                 } catch (_: Exception) {
                     // Si √ßa √©choue, essayer le format sans Z
                     try {
                         val spaceFormatSansZ = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
                         spaceFormatSansZ.parse(this)
                     } catch (_: Exception) {
                         null
                     }
                 }
             }
            this.matches(Regex("""\d{4}-\d{2}-\d{2}""")) -> {
                // Format date simple (ex: "2025-08-09")
                val simpleFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
                simpleFormat.parse(this)
            }
            else -> null
        }

        if (date == null) return null

        val calendar = Calendar.getInstance()
        calendar.time = date

        val jour = calendar.get(Calendar.DAY_OF_MONTH)
        val moisNum = calendar.get(Calendar.MONTH)
        val annee = calendar.get(Calendar.YEAR)

        // Noms des mois en fran√ßais
        val nomsMois = arrayOf(
            "janvier", "f√©vrier", "mars", "avril", "mai", "juin",
            "juillet", "ao√ªt", "septembre", "octobre", "novembre", "d√©cembre"
        )

        // Formatage du jour avec ordinal fran√ßais
        val jourTexte = when (jour) {
            1 -> "1er"
            else -> "${jour}"
        }

        DateFormatee(
            jour = jour,
            mois = nomsMois[moisNum],
            annee = annee,
            jourTexte = jourTexte
        )
    } catch (_: Exception) {
        null
    }
}
