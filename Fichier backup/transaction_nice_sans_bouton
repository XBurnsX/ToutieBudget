// chemin/simule: /ui/ajout_transaction/AjoutTransactionScreen.kt
// Dépendances: Jetpack Compose, ViewModel, Composants de sélection, ChampMontantUniversel

package com.xburnsx.toutiebudget.ui.ajout_transaction

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.xburnsx.toutiebudget.data.modeles.TypeTransaction
import com.xburnsx.toutiebudget.ui.ajout_transaction.composants.*
import com.xburnsx.toutiebudget.ui.composants_communs.ChampMontantUniversel

/**
 * Écran principal pour ajouter une nouvelle transaction.
 * Permet de saisir dépense ou revenu avec montant, compte, enveloppe et note.
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AjoutTransactionScreen(
    viewModel: AjoutTransactionViewModel,
    onNavigationBack: (() -> Unit)? = null
) {
    val uiState by viewModel.uiState.collectAsState()

    // Gestion des messages d'erreur
    LaunchedEffect(uiState.messageErreur) {
        if (!uiState.messageErreur.isNullOrBlank()) {
            // L'erreur sera affichée dans la Snackbar
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Ajouter Transaction", fontWeight = FontWeight.Bold) },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color(0xFF121212),
                    titleContentColor = Color.White
                ),
                navigationIcon = {
                    if (onNavigationBack != null) {
                        IconButton(onClick = onNavigationBack) {
                            Icon(
                                Icons.Default.ArrowBack,
                                contentDescription = "Retour",
                                tint = Color.White
                            )
                        }
                    }
                }
            )
        },
        containerColor = Color(0xFF121212),
        snackbarHost = { 
            if (!uiState.messageErreur.isNullOrBlank()) {
                SnackbarHost(
                    hostState = remember { SnackbarHostState() }
                ) {
                    Snackbar(
                        action = {
                            TextButton(onClick = { viewModel.effacerErreur() }) {
                                Text("OK", color = Color.White)
                            }
                        },
                        containerColor = Color(0xFFEF4444),
                        contentColor = Color.White
                    ) {
                        Text(uiState.messageErreur ?: "")
                    }
                }
            }
        }
    ) { paddingValues ->
        
        if (uiState.isLoading) {
            // Écran de chargement
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues),
                contentAlignment = Alignment.Center
            ) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(16.dp)
                ) {
                    CircularProgressIndicator(color = Color(0xFF6366F1))
                    Text(
                        text = "Chargement...",
                        color = Color.White.copy(alpha = 0.7f)
                    )
                }
            }
        } else {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues)
            ) {
                // Zone de défilement pour les champs de saisie
                Column(
                    modifier = Modifier
                        .weight(1f)
                        .verticalScroll(rememberScrollState())
                        .padding(horizontal = 16.dp),
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(24.dp)
                ) {
                    Spacer(modifier = Modifier.height(8.dp))

                    // 1. Sélecteur de type de transaction (Dépense/Revenu)
                    SelecteurTypeTransaction(
                        typeSelectionne = uiState.typeTransaction,
                        onTypeChange = viewModel::onTypeTransactionChanged,
                        modifier = Modifier.fillMaxWidth()
                    )

                    // 2. Champ de montant avec clavier personnalisé
                    ChampMontantUniversel(
                        montant = uiState.montant.toLongOrNull() ?: 0L,
                        onMontantChange = { nouveauMontant ->
                            viewModel.onMontantChanged(nouveauMontant.toString())
                        },
                        modifier = Modifier.fillMaxWidth(),
                        libelle = "Montant de la transaction"
                    )

                    // 3. Sélecteur de compte
                    SelecteurCompte(
                        comptes = uiState.comptesDisponibles,
                        compteSelectionne = uiState.compteSelectionne,
                        onCompteChange = viewModel::onCompteChanged,
                        modifier = Modifier.fillMaxWidth()
                    )

                    // 4. Sélecteur d'enveloppe (seulement pour les dépenses)
                    if (uiState.typeTransaction == TypeTransaction.Depense) {
                        SelecteurEnveloppe(
                            enveloppes = uiState.enveloppesDisponibles,
                            enveloppeSelectionnee = uiState.enveloppeSelectionnee,
                            onEnveloppeChange = viewModel::onEnveloppeChanged,
                            modifier = Modifier.fillMaxWidth(),
                            obligatoire = true
                        )
                    }

                    // 5. Champ note facultatif
                    ChampNoteTransaction(
                        note = uiState.note,
                        onNoteChange = viewModel::onNoteChanged,
                        modifier = Modifier.fillMaxWidth()
                    )

                    Spacer(modifier = Modifier.height(16.dp))
                }

                // Bouton de sauvegarde fixé en bas
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = if (uiState.peutSauvegarder && !uiState.estEnTrainDeSauvegarder) {
                            Color(0xFF6366F1)
                        } else {
                            Color(0xFF404040)
                        }
                    ),
                    shape = androidx.compose.foundation.shape.RoundedCornerShape(12.dp)
                ) {
                    Button(
                        onClick = viewModel::sauvegarderTransaction,
                        enabled = uiState.peutSauvegarder && !uiState.estEnTrainDeSauvegarder,
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(56.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color.Transparent,
                            contentColor = Color.White,
                            disabledContainerColor = Color.Transparent,
                            disabledContentColor = Color.White.copy(alpha = 0.5f)
                        )
                    ) {
                        if (uiState.estEnTrainDeSauvegarder) {
                            Row(
                                horizontalArrangement = Arrangement.spacedBy(8.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                CircularProgressIndicator(
                                    modifier = Modifier.size(20.dp),
                                    color = Color.White,
                                    strokeWidth = 2.dp
                                )
                                Text(
                                    text = "Sauvegarde...",
                                    fontSize = 16.sp,
                                    fontWeight = FontWeight.Medium
                                )
                            }
                        } else {
                            Row(
                                horizontalArrangement = Arrangement.spacedBy(8.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Icon(
                                    imageVector = Icons.Default.Save,
                                    contentDescription = null
                                )
                                Text(
                                    text = if (uiState.typeTransaction == TypeTransaction.Depense) {
                                        "Enregistrer la dépense"
                                    } else {
                                        "Enregistrer le revenu"
                                    },
                                    fontSize = 16.sp,
                                    fontWeight = FontWeight.Medium
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}